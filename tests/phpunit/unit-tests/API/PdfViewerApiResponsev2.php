<?php

namespace GFPDF\Tests\Previewer;

use GFPDF\Plugins\Previewer\Validation\Token;
use GFPDF\Plugins\Previewer\Exceptions\InvalidRequest;

use GPDFAPI;
use GFAPI;
use WP_UnitTestCase;
use WP_REST_Request;


/**
 * @package     Gravity PDF Previewer
 * @copyright   Copyright (c) 2020, Blue Liquid Designs
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 * @since       1.0
 */

/* Exit if accessed directly */
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

class TestPDFViewerApiResponsev2 extends WP_UnitTestCase {

	protected $class;
	protected $token;

	private $form_id;
	private $field_id;
	private $pdf_path;


	public function setUp() {

		$this->pdf_path = dirname( GFPDF_PDF_PREVIEWER_FILE ) . "/tmp/";
		$this->set_up_form( '/../../json/allowed-download-pdf-previewer-form.json' );
		$this->field_id = 5;

		@mkdir( dirname( $this->pdf_file ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $this->pdf_file, time(), mktime( null, 2, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged

		$this->token = new Token( $this->pdf_path );
		/* Stub our 'stream_pdf' and 'end' methods */
		$this->class = $this->getMockBuilder( '\GFPDF\Plugins\Previewer\API\PdfViewerApiResponseV2' )
		                    ->setConstructorArgs( [ $this->token, $this->pdf_path ] )
		                    ->setMethods( [ 'stream_pdf', 'end' ] )
		                    ->getMock();

		$this->class->set_logger( GPDFAPI::get_log_class() );


	}

	public function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * @since 0.1
	 *
	 */
	public function test_response() {
		$pdf     = $this->pdf_path . '12345/12345.pdf';
		$request = new WP_REST_Request( 'GET' );

		$token   = $this->token->create( [ $this->form_id, $this->field_id, '12345', '12345.pdf' ] );
		$request->set_header( 'content-type', 'application/json' );
		$request->set_param( 'token', $token );

		@mkdir( dirname( $pdf ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $pdf, time(), mktime( null, 0, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged

		$this->class->response( $request );
		$this->assertFileExists( $pdf );

		/* Update the PDF and test it is removed initially when the access number is equals to 2 */
		@touch( $pdf, time(), mktime( null, 1, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		clearstatcache();
		$this->class->response( $request );
		$this->assertFileNotExists( $pdf );

		/* Create a PDF and test it isn't removed initially when the download option is disabled */
		@mkdir( dirname( $pdf ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $pdf, time(), mktime( null, 0, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged

		$this->set_up_form( '/../../json/not-allowed-download-pdf-previewer-form.json' ); /* Load form with previewer field setting's pdfdownload is equal to false */
		$token   = $this->token->create( [ $this->form_id, $this->field_id, '12345', '12345.pdf' ] ); /* Recreate token*/
		$request->set_param( 'token', $token );
		clearstatcache();
		$this->class->response( $request );
		$this->assertFileNotExists( $pdf );

	}


	protected function set_up_form( $json_path ) {
		$this->form_id = GFAPI::add_form( json_decode( trim( file_get_contents( dirname( __FILE__ ) . $json_path ) ), true ) );

	}

}
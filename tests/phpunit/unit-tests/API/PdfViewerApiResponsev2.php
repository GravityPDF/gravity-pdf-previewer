<?php

namespace GFPDF\Tests\Previewer;

use GFPDF\Plugins\Previewer\Validation\Token;
use GFPDF\Plugins\Previewer\Exceptions\InvalidRequest;

use GPDFAPI;
use GFAPI;
use WP_UnitTestCase;
use WP_REST_Request;


/**
 * @package     Gravity PDF Previewer
 * @copyright   Copyright (c) 2020, Blue Liquid Designs
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 * @since       1.0
 */

/* Exit if accessed directly */
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

class TestPDFViewerApiResponsev2 extends WP_UnitTestCase {

	protected $class;
	protected $token;

	private $form_id;



	public function setUp() {
		$form_object = json_decode( trim( file_get_contents( dirname( __FILE__ ) . '/../../json/post-data-form.json' ) ), true );

		$this->form_id  = GFAPI::add_form( $form_object );
		$this->field_id = 9;
		$this->pdf_id   = 'test';
		$this->pdf_name = 'test.pdf';

		$pdf_path = dirname( GFPDF_PDF_PREVIEWER_FILE ) . "/tmp/";

		$this->pdf_file = $pdf_path . $this->pdf_id . '/' . $this->pdf_name;

		@mkdir( dirname( $this->pdf_file ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $this->pdf_file, time(), mktime( null, 2, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged

		$this->token = new Token( $pdf_path );
		/* Stub our 'stream_pdf' and 'end' methods */
		$this->class = $this->getMockBuilder( '\GFPDF\Plugins\Previewer\API\PdfViewerApiResponseV2' )
		                    ->setConstructorArgs( [ $this->token, $pdf_path ] )
		                    ->setMethods( [ 'stream_pdf', 'end' ] )
		                    ->getMock();

		$this->class->set_logger( GPDFAPI::get_log_class() );


	}

	public function tearDown() {
		GFAPI::delete_form( $this->form_id );
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * @since 0.1
	 *
	 */
	public function test_response() {
		$pdf_path =  dirname( GFPDF_PDF_PREVIEWER_FILE ).'/tmp/' ;
		$pdf     = $pdf_path.'12345/12345.pdf';
		$request = new WP_REST_Request( 'GET' );
		$request->set_header( 'content-type', 'application/json' );

		/* Test PDF not found */

		$response = $this->class->response( $request );
		$this->assertEquals( 'Requested PDF could not be found', $response->data['error'] );

		/* Create a PDF and test it gets correctly cleaned up */
		$request->set_param( 'temp_id', '12345' );
		@mkdir( dirname( $pdf ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $pdf, time(), mktime( null, 0, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		$this->class->response( $request );

		$this->assertFileNotExists( $pdf );

		/* Create a PDF and test it isn't removed initially when the download option is enabled */
		$request->set_param( 'download', '1' );
		@mkdir( dirname( $pdf ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged
		@touch( $pdf, time(), mktime( null, 0, 0 ) ); //phpcs:disable WordPress.PHP.NoSilencedErrors.Discouraged

		clearstatcache();

		$this->class->response( $request );
		$this->assertFileExists( $pdf );

		clearstatcache();

		$this->class->response( $request );
		$this->assertFileNotExists( $pdf );
	}


}